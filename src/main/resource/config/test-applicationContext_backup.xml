<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.0.xsd
				http://www.springframework.org/schema/tx
				http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				http://www.springframework.org/schema/jdbc
				http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
	
	<tx:annotation-driven/>
	<context:annotation-config />
	
	<jdbc:embedded-database id="embeddedDatabase" type="H2">
		<jdbc:script location="classpath:sql/schema.sql"/>
	</jdbc:embedded-database>
	
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/springbook?useSSL=false&amp;serverTimezone=UTC" />
		<property name="username" value="spring" />
		<property name="password" value="book" />
	</bean>
	
	<!-- 
	<bean id="jdbcContext" class="dao.JdbcContext">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	 -->
	
	<bean id="dconnectionMaker" class="dao.DConnectionMaker" />
	<!-- 
	<bean id="sqlService" class="service.sql.SimpleSqlService">
		<property name="sqlMap">
			<map>
				<entry key="userAdd" value="insert into user(id, name, password, level, login, recommand, email) values(?,?,?,?,?,?,?)"></entry>
				<entry key="userGet" value="select * from user where id = ?"></entry>
				<entry key="userDeleteAll" value="delete from user"></entry>
				<entry key="userGetCount" value="select count(*) from user"></entry>
				<entry key="userGetAll" value="select * from user order by id"></entry>
				<entry key="userUpdate" value="update user set name=?, password=?, level=?, login=?, recommand=?, email=? where id=?"></entry>
			</map>
		</property>
	</bean>
	 -->
	 
	 <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPath" value="service.sql.jaxb"/>
	</bean>
	<!-- 
	<bean id="sqlRegistry" class="service.sql.ConcurrentHashMapSqlRegistry">
	 </bean>
	 -->
	 <bean id="sqlRegistry" class="service.sql.EmbeddedDbSqlRegistry">
	 	<property name="dataSource" ref="embeddedDatabase"/>
	 </bean>
	 <bean id="sqlService" class="service.sql.OxmSqlService">
	 	<property name="unmarshaller" ref="unmarshaller" />
	 	<property name="sqlRegistry" ref="sqlRegistry" />
	 	<!-- <property name="sqlmap" value="classpath:dao/sqlmap.xml/"></property> -->
	 </bean>

	 <!-- 
	 <bean id="sqlService" class="service.sql.DefaultSqlService" />
	  -->
	 <!-- 
	 <bean id="sqlReader" class="service.sql.JaxbXmlSqlReader">
	 	<property name="sqlmapFile" value="sqlmap.xml" />
	 </bean>
	 <bean id="sqlRegistry" class="service.sql.HashMapSqlRegistry">
	 </bean>
	 <bean id="sqlService" class="service.sql.BaseSqlService">
	 	<property name="sqlReader" ref="sqlReader" />
	 	<property name="sqlRegistry" ref="sqlRegistry" />
	 </bean>
	  -->
	<!--  
	<bean id="sqlService" class="service.sql.XmlSqlService">
		<property name="sqlReader" ref="sqlService"/>
		<property name="sqlRegistry" ref="sqlService" />
		<property name="sqlmapFile" value="sqlmap.xml"></property>
	</bean>
	 -->
	<bean id="userDao" class="dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="jdbcContext" ref="jdbcContext" />  -->
		<property name="connectionMaker" ref="dconnectionMaker" />
		<property name="sqlService" ref="sqlService" />
		<!-- 
		<property name="sqlMap">
			<map>
				<entry key="add" value="insert into user(id, name, password, level, login, recommand, email) values(?,?,?,?,?,?,?)"></entry>
				<entry key="get" value="select * from user where id = ?"></entry>
				<entry key="deleteAll" value="delete from user"></entry>
				<entry key="getCount" value="select count(*) from user"></entry>
				<entry key="getAll" value="select * from user order by id"></entry>
				<entry key="update" value="update user set name=?, password=?, level=?, login=?, recommand=?, email=? where id=?"></entry>
			</map>
		</property>
		 -->
		<!-- 
		<property name="sqlAdd" value="insert into user(id, name, password, level, login, recommand, email) values(?,?,?,?,?,?,?)" />
		<property name="sqlGet" value="select * from user where id = ?" />
		<property name="sqlDelete" value="delete from user"></property>
		<property name="sqlGetCount" value="select count(*) from user"></property>
		<property name="sqlGetAll" value="select * from user order by id" />
		<property name="sqlUpdate" value="update user set name=?, password=?, level=?, login=?, recommand=?, email=? where id=?" />
		 -->
	</bean>
	
	
	<bean id="defaultUserLevelUpgradePolicy" class="service.user.DefaultUserLevelUpgradePolicy"/>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.server.com" />
	</bean>
	 -->
	<bean id="mailSender" class="service.mail.DummyMailSender" />
	 
	
	<bean id="userService" class="service.user.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<!--<property name="dataSource" ref="dataSource" /> -->
		<property name="userLevelUpgradePolicy" ref="defaultUserLevelUpgradePolicy" />
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="mailSender" ref="mailSender"></property>
	</bean>
	
	
	<bean id="testUserService" class="service.UserServiceTest$TestUserServiceImpl"
		parent="userService"/>
		
	<!-- 
	<bean id="userService" class="service.user.UserServiceTx">
		<property name="transactionManager" ref="transactionManager" />
		<property name="userService" ref="userServiceImpl"/>
	</bean>
	 -->
	 <!-- 
	 <bean id="userService" class="factory.TxProxyFactoryBean">
	 	<property name="target" ref="userServiceImpl"/>
	 	<property name="transactionManager" ref="transactionManager" />
	 	<property name="pattern" value="upgradeLevels"/>
	 	<property name="serviceInterface" value="service.user.UserService" />
	 </bean>
	  -->
	  <!-- 
	  <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
	  	<property name="target" ref="userServiceImpl" />
	  	<property name="interceptorNames">
	  		<list>
	  			<value>transactionAdvisor</value>
	  		</list>
	  	</property>
	  </bean>
	   -->
	 
	 <!-- 
	 <bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
	 	<property name="mappedName" value="upgrade*"/>
	 </bean>
	  -->
	 <!-- 
	 <bean id="transactionPointcut" class="service.proxy.NameMatchClassMethodPointcut">
	 	<property name="mappedClassName" value="*ServiceImpl" />
	 	<property name="mappedName" value="upgrade*" />
	 </bean>
	  -->
	 <!--
	 <bean id="transactionPointcut"
	 	class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
	 	<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>
	 </bean>
	  -->
	  
	 <!--  
	  <bean id="transactionAdvice" class="service.user.TransactionAdvice">
	 	<property name="transactionManager" ref="transactionManager"/>
	 </bean>
	  -->
	  <!-- 
	  <bean id="transactionAdvice"
	  		class="org.springframework.transaction.interceptor.TransactionInterceptor">
	  		<property name="transactionManager" ref="transactionManager" />
	  		<property name="transactionAttributes">
	  			<props>
	  				<prop key="get*">PROPAGATION_REQUIRED, readOnly, timeout_30</prop>
	  				<prop key="upgrade*">PROPAGATION_REQUIRED_NEW, ISOLATION_SERIALIZABLE</prop>
	  				<prop key="*">PROPAGATION_REQUIRED</prop>
	  			</props>
	  		</property>
	  </bean>
	   -->
	  <!--  
	  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
	  	<tx:attributes>
	  		<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30"/>
	  		<tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE"/>
	  		<tx:method name="*" propagation="REQUIRED"/>
	  	</tx:attributes>
	  </tx:advice>
	   -->
	   
	  <tx:advice id="transactionAdvice">
	  	<tx:attributes>
	  		<tx:method name="get*" read-only="true"/>
	  		<tx:method name="*"/>
	  	</tx:attributes>
	  </tx:advice>
	  
	 <!-- 
	 <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
	 	<property name="advice" ref="transactionAdvice"/>
	 	<property name="pointcut" ref="transactionPointcut"/>
	 </bean>
	  -->
	 <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
	 
	 <aop:config>
	 <!-- 
	 	<aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..)))" />
	 	<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
	  -->
	  	<!-- 
	  	<aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl.upgrade*(..))" />
	  	 -->
	  	<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
	 </aop:config>
	 
	 
	 
	 
</beans>